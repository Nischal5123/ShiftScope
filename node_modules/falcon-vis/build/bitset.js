// from https://github.com/mikolalysenko/minimal-bit-array/blob/master/bitarray.js with modifications
export class BitSet {
    constructor(length, bits) {
        this.length = length;
        this._bits = bits || new Uint32Array((length >>> 5) + 1);
    }
    get(i) {
        i |= 0;
        return !!(this._bits[i >>> 5] & (1 << (i & 31)));
    }
    get bits() {
        return this._bits;
    }
    set(i, v) {
        i |= 0;
        const idx = i >>> 5;
        const bit = 1 << (i & 31);
        if (v) {
            this._bits[idx] |= bit;
        }
        else {
            this._bits[idx] &= ~bit;
        }
        return this;
    }
    union(other) {
        for (let i = 0; i < this._bits.length; i++) {
            this._bits[i] = this._bits[i] | other._bits[i];
        }
    }
    *[Symbol.iterator]() {
        for (let i = 0; i < this.length; i++) {
            yield this.get(i);
        }
    }
}
/**
 * Compute the union of all bit sets. The sets need to have the same length.
 * If you only pass in a single bit set, this function will not make a copy.
 */
export function union(...sets) {
    if (sets.length == 0) {
        return null;
    }
    if (sets.length == 1) {
        return sets[0];
    }
    // copy of first set
    const out = new BitSet(sets[0].length, new Uint32Array(sets[0].bits));
    for (let i = 1; i < sets.length; i++) {
        const set = sets[i];
        out.union(set);
    }
    return out;
}
//# sourceMappingURL=bitset.js.map