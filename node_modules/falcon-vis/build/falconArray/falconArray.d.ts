import type { TypedArray, TypedArrayConstructor } from "./arrayTypes";
import type { NdArray } from "ndarray";
/**
 * abstract away the NdArray reliance and can be swapped out
 * for std lib js for example or vanilla, or tensorflow.js?
 *
 * @resource [PyTorch example of shape, stride, offset](https://www.youtube.com/watch?v=85xBkapaZts)
 */
export declare class FalconArray {
    static ALL: null;
    ndarray: NdArray;
    data: TypedArray;
    constructor(data: TypedArray, shape?: number[], strides?: number[], offset?: number);
    /**
     * these GETS AND SETS can be replaced with
     * variables on the object when we phase out ndarray
     */
    get shape(): number[];
    get offset(): number;
    get strides(): number[];
    get length(): number;
    set shape(value: number[]);
    set offset(value: number);
    set strides(value: number[]);
    get(...indices: number[]): number;
    set(...indices: number[]): number;
    fill(value: number): void;
    /**
     * increments the location defined by index by
     * whatever you want!
     */
    increment(index: number[], incrementBy?: number): void;
    /**
     * this + other and overrides this memory
     */
    addToItself(other: FalconArray): this;
    /**
     * this - other and overrides this memory
     */
    subToItself(other: FalconArray): this;
    /**
     * this + other = new memory
     */
    add(other: FalconArray, ReturnArray?: TypedArrayConstructor): FalconArray;
    /**
     * this - other = new memory
     */
    sub(other: FalconArray, ReturnArray?: TypedArrayConstructor): FalconArray;
    /**
     * slice by changing the shape, offset, or stride
     * no new memory created
     */
    slice(...indices: (number | null)[]): FalconArray;
    /**
     * prefix sum across and up
     */
    cumulativeSum(): this;
    /**
     * @returns FalconArray with typed array
     */
    private static typedArray;
    /**
     * Typed array to store and accumulate values
     * Float for this, but consider other options
     *
     * Namely for the cubes
     *
     * @returns FalconArray with the given length allocated
     */
    static allocCumulative(length: number, shape?: number[], stride?: number[], offset?: number): FalconArray;
    /**
     * Typed array to store integer counts. Namely the histogram bins and counts.
     *
     * @returns FalconArray with the given length allocated
     */
    static allocCounts(length: number, shape?: number[], stride?: number[], offset?: number): FalconArray;
    toString2D(): string;
    toString1D(): string;
    toString(): string;
    deepCopy(ArrayType: TypedArrayConstructor): FalconArray;
}
