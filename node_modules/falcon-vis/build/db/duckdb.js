import { compactQuery } from "../util";
import { SQLDB } from "./sql";
import * as duckdb from "@duckdb/duckdb-wasm";
export class DuckDB extends SQLDB {
    /**
     * pass in the duckdb wasm object and the table name
     * you want to look at
     */
    constructor(db, table, nameMap) {
        super(table, nameMap);
        this.db = db;
    }
    /**
     * given a SQL query, query the duckdb database
     *
     * @returns the query results
     */
    async query(q) {
        const t0 = performance.now();
        q = q.replaceAll("count(*)", "count(*)::INT");
        const c = await this.db.connect();
        const results = await c.query(q);
        c.close();
        q = compactQuery(q);
        console.info(`%c${q}`, "color: #bbb", "\nRows:", results.numRows, "Execution time:", performance.now() - t0, "ms.");
        return results;
    }
    castTime(name) {
        // converts to seconds UTC, then to milliseconds
        return `epoch(${name})*1000`;
    }
    /**
     * creates new FalconDB instance from this parquet file
     *
     * @returns a new FalconDB
     */
    static async fromParquetFile(url, table = "data", nameMap, useFullUrlFromWindow = true) {
        const db = await createNewTable(table, `CREATE TABLE '${table}' AS SELECT * FROM parquet_scan('${useFullUrlFromWindow ? fullUrl(url) : url}')`);
        return new DuckDB(db, table, nameMap);
    }
}
async function createNewTable(table, createTableQuery) {
    const JSDELIVR_BUNDLES = duckdb.getJsDelivrBundles();
    const bundle = await duckdb.selectBundle(JSDELIVR_BUNDLES);
    const worker = await duckdb.createWorker(bundle.mainWorker);
    const logger = new duckdb.ConsoleLogger();
    const db = new duckdb.AsyncDuckDB(logger, worker);
    await db.instantiate(bundle.mainModule, bundle.pthreadWorker);
    const c = await db.connect();
    await c.query(createTableQuery);
    const info = await c.query(`PRAGMA table_info('${table}')`);
    console.table(info.toArray().map(Object.fromEntries));
    c.close();
    return db;
}
function fullUrl(filename) {
    return `${window.location.href}${filename}`;
}
//# sourceMappingURL=duckdb.js.map