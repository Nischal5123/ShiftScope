import HeavyaiCon from "@heavyai/connector";
import { compactQuery } from "../util";
import { SQLDB } from "./sql";
const connector = new HeavyaiCon();
export class HeavyaiDB extends SQLDB {
    constructor(session, table, nameMap) {
        super(table, nameMap);
        this.session = session;
    }
    static async connectSession(conn, table, nameMap) {
        const connection = connector
            .protocol(conn.protocol)
            .host(conn.host)
            .port(conn.port)
            .dbName(conn.dbName)
            .user(conn.user)
            .password(conn.password);
        const session = await connection.connectAsync();
        return new HeavyaiDB(session, table, nameMap);
    }
    castBins(input) {
        return `cast(${input} as float)`;
    }
    castTime(name) {
        return `extract(epoch from ${name}) * 1000`;
    }
    async dimensionExists(_) {
        /**
         * @todo figure out in heavyai sql how to do this
         */
        return true;
    }
    async tableExists() {
        /**
         * @todo figure out in heavyai sql how to do this
         */
        return true;
    }
    async query(q) {
        const t0 = performance.now();
        const { results, timing,
        // fields
         } = await this.session.queryDFAsync(q, {
            returnTiming: true,
        });
        q = compactQuery(q);
        console.info(`%c${q}`, "color: #bbb", "\nRows:", results.length, "Execution time:", timing.execution_time_ms, "ms. With network:", performance.now() - t0, "ms.");
        return results;
    }
}
//# sourceMappingURL=heavyai.js.map