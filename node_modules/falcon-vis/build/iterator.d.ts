import type { BitSet } from "./bitset";
export type Row = Record<string, any>;
export declare class RowIterator {
    private numRows;
    private rowGetter;
    private mask?;
    offset: number;
    length: number;
    /**
     * An iterable that yields rows from an arrow like iterator
     * This row iterator also does filtering
     *
     * @param numRows the total number of rows in the
     * @param rowGetter a callback that returns the row at the given row index
     * @param mask a bitset mask that defines which rows to filter out (0 means keep, 1 means filter out)
     * @param offset the number of rows to skip before yielding the first filtered row
     * @param length the number of rows to yield of the filtered rows
     */
    constructor(numRows: number, rowGetter: (index: number) => Row | null, mask?: BitSet | null | undefined, offset?: number, length?: number);
    /**
     * iterates over all rows where bit is 0 in bitmask
     */
    filteredRows(): Generator<Row | null, void, unknown>;
    /**
     * iterates over all rows where bit is 0 in bitmask
     * also takes into account offset and length of the filtered rows
     */
    [Symbol.iterator](): Generator<Row | null, void, unknown>;
}
