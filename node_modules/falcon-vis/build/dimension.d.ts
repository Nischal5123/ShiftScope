import type { BinConfig, Interval } from "./util";
interface AbstractDimension {
    type: string;
    name: string;
}
export interface ContinuousDimension extends AbstractDimension {
    type: "continuous";
    resolution: number;
    bins?: number;
    exact?: boolean;
    range?: ContinuousRange;
    binConfig?: BinConfig;
    time?: boolean;
}
export interface CategoricalDimension extends AbstractDimension {
    type: "categorical";
    /**
     * possible values to look at, blank if just use all
     * @todo change this to an exclude or what to include
     */
    range?: CategoricalRange;
}
export type Dimension = ContinuousDimension | CategoricalDimension;
export type ContinuousRange = Interval<number>;
export type CategoricalRange = any[];
export type DimensionFilter = ContinuousRange | CategoricalRange;
export type KeyRequired<T, K extends keyof T> = T & Required<Pick<T, K>>;
export type KeyOptional<T, K extends keyof T> = T & Partial<Pick<T, K>>;
export {};
