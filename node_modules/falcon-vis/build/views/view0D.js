import { binNumberFunctionCategorical } from "../util";
import { ViewAbstract } from "./viewAbstract";
export class View0D extends ViewAbstract {
    constructor(falcon) {
        super(falcon);
        this.state = { total: null, filter: null };
    }
    /**
     * @returns all count from the db and signals the user
     */
    async all() {
        const total = await this.falcon.db.length(this.falcon.filters.size > 0 ? this.falcon.filters : undefined);
        this.state.total = total;
        this.state.filter = total;
        // signals/broadcasts new counts to the user
        this.signalOnChange(this.state);
        return this;
    }
    /**
     * Given an active 1D view, count for this passive view
     */
    async countFromActiveContinuous1D(pixels) {
        // take in the index
        const index = await this.falcon.index.get(this);
        if (index === undefined) {
            throw Error("Cannot count for undefined index in 0D");
        }
        // update state
        if (!pixels) {
            this.state.filter = index.noFilter.get(0);
        }
        else {
            const A = index.filter.get(pixels[0]);
            const B = index.filter.get(pixels[1]);
            this.state.filter = B - A;
        }
        // signal user
        this.signalOnChange(this.state);
    }
    /**
     * Given an active 1D view, count for this passive view
     */
    async countFromActiveCategorical1D(selection, totalRange) {
        // take in the index
        const index = await this.falcon.index.get(this);
        if (index === undefined) {
            throw Error("Cannot count for undefined index in 0D");
        }
        // update state
        if (selection === undefined) {
            this.state.filter = index.noFilter.get(0);
        }
        else {
            // sum over selections to get counts per bin
            const bin = binNumberFunctionCategorical(totalRange);
            let total = 0;
            for (const s of selection) {
                const binKey = bin(s);
                if (binKey !== undefined) {
                    total += index.filter.get(binKey);
                }
            }
            this.state.filter = total;
        }
        // signal user
        this.signalOnChange(this.state);
    }
    /**
     * attaches to the global falcon index
     */
    async attach() {
        this.falcon.views.add(this);
        await this.falcon.link();
    }
    /**
     * detaches from the global falcon index
     */
    async detach() {
        this.falcon.views.remove(this);
        this.falcon.index.delete(this);
    }
}
//# sourceMappingURL=view0D.js.map