import { ViewAbstract } from "./viewAbstract";
import type { Interval } from "../util";
import type { FalconVis } from "../falcon";
import type { CategoricalRange } from "../dimension";
export interface View0DState {
    total: number | null;
    filter: number | null;
}
export type CountState = View0DState;
export declare class View0D extends ViewAbstract<View0DState> {
    state: View0DState;
    constructor(falcon: FalconVis);
    /**
     * @returns all count from the db and signals the user
     */
    all(): Promise<this>;
    /**
     * Given an active 1D view, count for this passive view
     */
    countFromActiveContinuous1D(pixels?: Interval<number>): Promise<void>;
    /**
     * Given an active 1D view, count for this passive view
     */
    countFromActiveCategorical1D(selection?: CategoricalRange, totalRange?: CategoricalRange): Promise<void>;
    /**
     * attaches to the global falcon index
     */
    attach(): Promise<void>;
    /**
     * detaches from the global falcon index
     */
    detach(): Promise<void>;
}
