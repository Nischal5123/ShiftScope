export class ViewAbstract {
    /**
     * Links this new view with all other views through the falcon object
     * by default is passive (isActive = false)
     */
    constructor(falcon) {
        this.isActive = false;
        this.linkTogetherWithOtherViews(falcon);
        this.onChangeListeners = new Set();
    }
    linkTogetherWithOtherViews(falcon) {
        this.falcon = falcon;
    }
    /**
     * calls your listener function when the counts change after filtering
     * @returns a function that removes the listener when called
     */
    onChange(listener) {
        this.onChangeListeners.add(listener);
        return () => this.onChangeListeners.delete(listener);
    }
    // new name
    addOnChangeListener(listener) {
        return this.onChange(listener);
    }
    /**
     * Calls every on change listener on the changed state
     */
    signalOnChange(state) {
        this.onChangeListeners.forEach((onChange) => {
            onChange(state);
        });
    }
    /**
     * Set all other views passive
     * and this one active
     */
    markThisViewActive() {
        this.falcon.views.forEach((view) => {
            view.isActive = false;
        });
        this.isActive = true;
    }
}
//# sourceMappingURL=viewAbstract.js.map