/**
 * Collections of views
 * Assumes that views are unique and distinct (we don't have the same view twice here)
 */
export class ViewSet {
    constructor() {
        this.views = [];
    }
    remove(viewToRemove) {
        const index = this.views.findIndex((view) => view == viewToRemove);
        if (index !== -1) {
            this.views.splice(index, 1);
        }
    }
    /**
     * adds view to collections
     * if view already in collection does not add it
     */
    add(viewToSave) {
        const notFound = this.views.findIndex((view) => view == viewToSave) === -1;
        if (notFound) {
            this.views.push(viewToSave);
        }
    }
    /**
     * @returns all the views that are not active (meaning passive)
     */
    get passive() {
        return this.views.filter((view) => !view.isActive);
    }
    /**
     * @returns the only active view, undefined if didn't find it
     */
    get active() {
        const activeView = this.views.find((view) => view.isActive);
        // if found, must be a View1D TODO extend to View2D
        if (activeView) {
            return activeView;
        }
        else {
            return undefined;
        }
    }
    get size() {
        return this.views.length;
    }
    forEach(eachView) {
        this.views.forEach(eachView);
    }
    [Symbol.iterator]() {
        return this.views[Symbol.iterator]();
    }
}
//# sourceMappingURL=viewSet.js.map